AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VPCStack:
    Type: String
    Description: VPC Stack Name
  ECSStack:
    Type: String
    Description: ECS Stack Name
  ECRStack:
    Type: String
    Description: ECR Stack Name
  DesiredCount:
    Type: Number
    Default: '2'
    Description: Desired task count
  Path:
    Type: String
    Default: '/service'
    Description: Service path
  Version:
    Type: String
    Default: 'latest'
    Description: Service version
Resources:

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
                "Version": "2012-10-17",
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:Describe*",
                            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                            "elasticloadbalancing:Describe*",
                            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                            "elasticloadbalancing:DeregisterTargets",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:RegisterTargets"
                        ],
                        "Resource": "*"
                }]
            }


#  TaskDefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: !Ref AWS::StackName
#      ContainerDefinitions:
#      - Name: !Ref AWS::StackName
#        Cpu: '10'
#        Essential: 'true'
#        Image: httpd:2.4
#        Memory: '300'
#        LogConfiguration:
#          LogDriver: awslogs
#          Options:
#            awslogs-group: !Ref AWS::StackName
#            awslogs-region: !Ref AWS::Region
#        MountPoints:
#          - ContainerPath: /usr/local/apache2/htdocs
#            SourceVolume: my-vol
#        PortMappings:
#          - ContainerPort: 80
#      - Name: busybox
#        Cpu: 10
#        Command: [
#            '/bin/sh -c "while true; do echo ''<html> <head> <title>Amazon ECS
#            Sample App</title> <style>body {margin-top: 40px; background-color: #333;}
#            </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon
#            ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now
#            running on a container in Amazon ECS.</p>'' > top; /bin/date > date ;
#            echo ''</div></body></html>'' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html
#            ; sleep 1; done"'
#          ]
#        EntryPoint: [sh, -c]
#        Essential: false
#        Image: busybox
#        Memory: 200
#        LogConfiguration:
#          LogDriver: awslogs
#          Options:
#            awslogs-group: !Ref AWS::StackName
#            awslogs-region: !Ref AWS::Region
#        VolumesFrom:
#        - SourceContainer: !Ref AWS::StackName
#      Volumes:
#      - Name: my-vol

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Essential: true
          Image: !Sub
            - "${URL}:${Version}"
            - {
                URL: { "Fn::ImportValue" : {"Fn::Sub": "${ECRStack}-Service1RepositoryUrl" } },
                Version: !Ref Version
              }
          Memory: 128
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStack}-VPCID"
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue:
          !Sub "${ECSStack}-LoadBalancerListener"
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${ECSStack}-ECSCluster"
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup

Outputs:
  Service:
    Value: !Ref 'Service'
    Export:
      Name: !Sub '${AWS::StackName}-Service'
  TaskDefinition:
    Value: !Ref 'TaskDefinition'
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinition'
  CloudWatchLogsGroup:
    Value: !Ref 'CloudWatchLogsGroup'
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchLogsGroup'